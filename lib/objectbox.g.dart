// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';

import 'model/model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(5, 8360509503699827125),
      name: 'Judge',
      lastPropertyId: const IdUid(6, 524073830556828776),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1414513155036027999),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1777527789161249629),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1089653184613473677),
            name: 'residenceId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7336841630808013173),
            name: 'address',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6747506728110887513),
            name: 'phone',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 524073830556828776),
            name: 'email',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 1372100812157548192),
      name: 'Score',
      lastPropertyId: const IdUid(3, 7910226822742996695),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4894947576706125332),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1049902275129523636),
            name: 'judgeId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 6190742138973010568),
            relationTarget: 'Judge'),
        ModelProperty(
            id: const IdUid(3, 7910226822742996695),
            name: 'score',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(8, 4642788483252372017),
      name: 'ScoreboardEntry',
      lastPropertyId: const IdUid(3, 8972690301078380260),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5621815656417561678),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 718624010146676961),
            name: 'competitorId',
            type: 11,
            flags: 520,
            indexId: const IdUid(2, 5994553263546419004),
            relationTarget: 'Competitor'),
        ModelProperty(
            id: const IdUid(3, 8972690301078380260),
            name: 'stageId',
            type: 11,
            flags: 520,
            indexId: const IdUid(3, 3070000580883037925),
            relationTarget: 'Stage')
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 5441611030727067559),
            name: 'scores',
            targetId: const IdUid(7, 1372100812157548192))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(9, 7977700797493693521),
      name: 'Stage',
      lastPropertyId: const IdUid(2, 3937892433863462633),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3138701474444696453),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3937892433863462633),
            name: 'dbJudgeNPassingScores',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(10, 3273469657153820092),
      name: 'Competitor',
      lastPropertyId: const IdUid(7, 6772504220899237542),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7455181319278288722),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 9061367631020027735),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 889120121631261264),
            name: 'residenceId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4843055048740156517),
            name: 'address',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8447025294662751815),
            name: 'phone',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 9118174086770971415),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6772504220899237542),
            name: 'competitorId',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(11, 2143324199937857484),
      name: 'Tournament',
      lastPropertyId: const IdUid(3, 8061955248373288839),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8860960041223858475),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6965898717924337084),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8061955248373288839),
            name: 'description',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(2, 2568818473547561097),
            name: 'competitors',
            targetId: const IdUid(10, 3273469657153820092)),
        ModelRelation(
            id: const IdUid(3, 586466507117007659),
            name: 'judges',
            targetId: const IdUid(5, 8360509503699827125))
      ],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Store openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) =>
    Store(getObjectBoxModel(),
        directory: directory,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(11, 2143324199937857484),
      lastIndexId: const IdUid(3, 3070000580883037925),
      lastRelationId: const IdUid(3, 586466507117007659),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [
        747831964335535222,
        4651615864322634293,
        1091231750478645253,
        3306502642030329070,
        9095652094058333340
      ],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        2584474832848465957,
        4580888889582102859,
        5400066642160923373,
        2796361393654158383,
        4907193833062832185,
        3111711872221391444,
        6159530164938927744,
        3123754041505721480,
        7237203063579120900,
        4100484330637309071,
        8320179227420068774,
        2302630891506554280,
        7765671539092662278,
        7061162228466396506,
        6437622717735475663,
        2044814619654613751,
        3630906603363422694,
        8722598386180085515,
        3942728790377468530,
        5185816356473486300,
        6047499622236506422,
        6768301755525889300,
        1550733389159712556,
        1021262974217629365,
        2097063842679654283,
        1150680766921259761,
        226940530939374898,
        7463807852558615959,
        5071726637875788921,
        473302167760636704
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Judge: EntityDefinition<Judge>(
        model: _entities[0],
        toOneRelations: (Judge object) => [],
        toManyRelations: (Judge object) => {},
        getId: (Judge object) => object.id,
        setId: (Judge object, int id) {
          object.id = id;
        },
        objectToFB: (Judge object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final residenceIdOffset = object.residenceId == null
              ? null
              : fbb.writeString(object.residenceId!);
          final addressOffset =
              object.address == null ? null : fbb.writeString(object.address!);
          final phoneOffset =
              object.phone == null ? null : fbb.writeString(object.phone!);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, residenceIdOffset);
          fbb.addOffset(3, addressOffset);
          fbb.addOffset(4, phoneOffset);
          fbb.addOffset(5, emailOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Judge(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              residenceId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              address: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              phone: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14));

          return object;
        }),
    Score: EntityDefinition<Score>(
        model: _entities[1],
        toOneRelations: (Score object) => [object.judge],
        toManyRelations: (Score object) => {},
        getId: (Score object) => object.id,
        setId: (Score object, int id) {
          object.id = id;
        },
        objectToFB: (Score object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.judge.targetId);
          fbb.addInt64(2, object.score);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Score(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              score:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          object.judge.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.judge.attach(store);
          return object;
        }),
    ScoreboardEntry: EntityDefinition<ScoreboardEntry>(
        model: _entities[2],
        toOneRelations: (ScoreboardEntry object) =>
            [object.competitor, object.stage],
        toManyRelations: (ScoreboardEntry object) =>
            {RelInfo<ScoreboardEntry>.toMany(1, object.id): object.scores},
        getId: (ScoreboardEntry object) => object.id,
        setId: (ScoreboardEntry object, int id) {
          object.id = id;
        },
        objectToFB: (ScoreboardEntry object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.competitor.targetId);
          fbb.addInt64(2, object.stage.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ScoreboardEntry(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));
          object.competitor.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.competitor.attach(store);
          object.stage.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.stage.attach(store);
          InternalToManyAccess.setRelInfo(
              object.scores,
              store,
              RelInfo<ScoreboardEntry>.toMany(1, object.id),
              store.box<ScoreboardEntry>());
          return object;
        }),
    Stage: EntityDefinition<Stage>(
        model: _entities[3],
        toOneRelations: (Stage object) => [],
        toManyRelations: (Stage object) => {},
        getId: (Stage object) => object.id,
        setId: (Stage object, int id) {
          object.id = id;
        },
        objectToFB: (Stage object, fb.Builder fbb) {
          final dbJudgeNPassingScoresOffset =
              fbb.writeString(object.dbJudgeNPassingScores);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, dbJudgeNPassingScoresOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Stage(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0))
            ..dbJudgeNPassingScores =
                const fb.StringReader(asciiOptimization: true)
                    .vTableGet(buffer, rootOffset, 6, '');

          return object;
        }),
    Competitor: EntityDefinition<Competitor>(
        model: _entities[4],
        toOneRelations: (Competitor object) => [],
        toManyRelations: (Competitor object) => {},
        getId: (Competitor object) => object.id,
        setId: (Competitor object, int id) {
          object.id = id;
        },
        objectToFB: (Competitor object, fb.Builder fbb) {
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final residenceIdOffset = object.residenceId == null
              ? null
              : fbb.writeString(object.residenceId!);
          final addressOffset =
              object.address == null ? null : fbb.writeString(object.address!);
          final phoneOffset =
              object.phone == null ? null : fbb.writeString(object.phone!);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, residenceIdOffset);
          fbb.addOffset(3, addressOffset);
          fbb.addOffset(4, phoneOffset);
          fbb.addOffset(5, emailOffset);
          fbb.addInt64(6, object.competitorId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Competitor(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              competitorId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              residenceId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8),
              address: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10),
              phone: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14));

          return object;
        }),
    Tournament: EntityDefinition<Tournament>(
        model: _entities[5],
        toOneRelations: (Tournament object) => [],
        toManyRelations: (Tournament object) => {
              RelInfo<Tournament>.toMany(2, object.id): object.competitors,
              RelInfo<Tournament>.toMany(3, object.id): object.judges
            },
        getId: (Tournament object) => object.id,
        setId: (Tournament object, int id) {
          object.id = id;
        },
        objectToFB: (Tournament object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Tournament(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              description: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8));
          InternalToManyAccess.setRelInfo(
              object.competitors,
              store,
              RelInfo<Tournament>.toMany(2, object.id),
              store.box<Tournament>());
          InternalToManyAccess.setRelInfo(
              object.judges,
              store,
              RelInfo<Tournament>.toMany(3, object.id),
              store.box<Tournament>());
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Judge] entity fields to define ObjectBox queries.
class Judge_ {
  /// see [Judge.id]
  static final id = QueryIntegerProperty<Judge>(_entities[0].properties[0]);

  /// see [Judge.name]
  static final name = QueryStringProperty<Judge>(_entities[0].properties[1]);

  /// see [Judge.residenceId]
  static final residenceId =
      QueryStringProperty<Judge>(_entities[0].properties[2]);

  /// see [Judge.address]
  static final address = QueryStringProperty<Judge>(_entities[0].properties[3]);

  /// see [Judge.phone]
  static final phone = QueryStringProperty<Judge>(_entities[0].properties[4]);

  /// see [Judge.email]
  static final email = QueryStringProperty<Judge>(_entities[0].properties[5]);
}

/// [Score] entity fields to define ObjectBox queries.
class Score_ {
  /// see [Score.id]
  static final id = QueryIntegerProperty<Score>(_entities[1].properties[0]);

  /// see [Score.judge]
  static final judge =
      QueryRelationToOne<Score, Judge>(_entities[1].properties[1]);

  /// see [Score.score]
  static final score = QueryIntegerProperty<Score>(_entities[1].properties[2]);
}

/// [ScoreboardEntry] entity fields to define ObjectBox queries.
class ScoreboardEntry_ {
  /// see [ScoreboardEntry.id]
  static final id =
      QueryIntegerProperty<ScoreboardEntry>(_entities[2].properties[0]);

  /// see [ScoreboardEntry.competitor]
  static final competitor = QueryRelationToOne<ScoreboardEntry, Competitor>(
      _entities[2].properties[1]);

  /// see [ScoreboardEntry.stage]
  static final stage =
      QueryRelationToOne<ScoreboardEntry, Stage>(_entities[2].properties[2]);

  /// see [ScoreboardEntry.scores]
  static final scores =
      QueryRelationToMany<ScoreboardEntry, Score>(_entities[2].relations[0]);
}

/// [Stage] entity fields to define ObjectBox queries.
class Stage_ {
  /// see [Stage.id]
  static final id = QueryIntegerProperty<Stage>(_entities[3].properties[0]);

  /// see [Stage.dbJudgeNPassingScores]
  static final dbJudgeNPassingScores =
      QueryStringProperty<Stage>(_entities[3].properties[1]);
}

/// [Competitor] entity fields to define ObjectBox queries.
class Competitor_ {
  /// see [Competitor.id]
  static final id =
      QueryIntegerProperty<Competitor>(_entities[4].properties[0]);

  /// see [Competitor.name]
  static final name =
      QueryStringProperty<Competitor>(_entities[4].properties[1]);

  /// see [Competitor.residenceId]
  static final residenceId =
      QueryStringProperty<Competitor>(_entities[4].properties[2]);

  /// see [Competitor.address]
  static final address =
      QueryStringProperty<Competitor>(_entities[4].properties[3]);

  /// see [Competitor.phone]
  static final phone =
      QueryStringProperty<Competitor>(_entities[4].properties[4]);

  /// see [Competitor.email]
  static final email =
      QueryStringProperty<Competitor>(_entities[4].properties[5]);

  /// see [Competitor.competitorId]
  static final competitorId =
      QueryIntegerProperty<Competitor>(_entities[4].properties[6]);
}

/// [Tournament] entity fields to define ObjectBox queries.
class Tournament_ {
  /// see [Tournament.id]
  static final id =
      QueryIntegerProperty<Tournament>(_entities[5].properties[0]);

  /// see [Tournament.name]
  static final name =
      QueryStringProperty<Tournament>(_entities[5].properties[1]);

  /// see [Tournament.description]
  static final description =
      QueryStringProperty<Tournament>(_entities[5].properties[2]);

  /// see [Tournament.competitors]
  static final competitors =
      QueryRelationToMany<Tournament, Competitor>(_entities[5].relations[0]);

  /// see [Tournament.judges]
  static final judges =
      QueryRelationToMany<Tournament, Judge>(_entities[5].relations[1]);
}
